### YamlMime:ManagedReference
items:
- uid: BackedFramework.Controllers.BaseController
  commentId: T:BackedFramework.Controllers.BaseController
  id: BaseController
  parent: BackedFramework.Controllers
  children:
  - BackedFramework.Controllers.BaseController.#ctor
  - BackedFramework.Controllers.BaseController.Dispose
  - BackedFramework.Controllers.BaseController.Request
  - BackedFramework.Controllers.BaseController.Response
  langs:
  - csharp
  - vb
  name: BaseController
  nameWithType: BaseController
  fullName: BackedFramework.Controllers.BaseController
  type: Class
  source:
    remote:
      path: BackedFramework/Controllers/BaseController.cs
      branch: master
      repo: https://github.com/IAmTheTable/BackedFramework.git
    id: BaseController
    path: ../BackedFramework/Controllers/BaseController.cs
    startLine: 13
  assemblies:
  - BackedFramework
  namespace: BackedFramework.Controllers
  summary: "\nA class to represent a controller, useful for routing requests to the correct controller.\n"
  example: []
  syntax:
    content: 'public class BaseController : IDisposable'
    content.vb: >-
      Public Class BaseController
          Implements IDisposable
  inheritance:
  - System.Object
  derivedClasses:
  - TestProject.Base
  - TestProject.Home
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: BackedFramework.Controllers.BaseController.#ctor
  commentId: M:BackedFramework.Controllers.BaseController.#ctor
  id: '#ctor'
  parent: BackedFramework.Controllers.BaseController
  langs:
  - csharp
  - vb
  name: BaseController()
  nameWithType: BaseController.BaseController()
  fullName: BackedFramework.Controllers.BaseController.BaseController()
  type: Constructor
  source:
    remote:
      path: BackedFramework/Controllers/BaseController.cs
      branch: master
      repo: https://github.com/IAmTheTable/BackedFramework.git
    id: .ctor
    path: ../BackedFramework/Controllers/BaseController.cs
    startLine: 15
  assemblies:
  - BackedFramework
  namespace: BackedFramework.Controllers
  syntax:
    content: public BaseController()
    content.vb: Public Sub New
  overload: BackedFramework.Controllers.BaseController.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BackedFramework.Controllers.BaseController.Response
  commentId: P:BackedFramework.Controllers.BaseController.Response
  id: Response
  parent: BackedFramework.Controllers.BaseController
  langs:
  - csharp
  - vb
  name: Response
  nameWithType: BaseController.Response
  fullName: BackedFramework.Controllers.BaseController.Response
  type: Property
  source:
    remote:
      path: BackedFramework/Controllers/BaseController.cs
      branch: master
      repo: https://github.com/IAmTheTable/BackedFramework.git
    id: Response
    path: ../BackedFramework/Controllers/BaseController.cs
    startLine: 30
  assemblies:
  - BackedFramework
  namespace: BackedFramework.Controllers
  summary: "\nAn instance of a response context object.\n"
  example: []
  syntax:
    content: public ResponseContext Response { get; }
    parameters: []
    return:
      type: BackedFramework.Resources.HTTP.ResponseContext
    content.vb: Public ReadOnly Property Response As ResponseContext
  overload: BackedFramework.Controllers.BaseController.Response*
  seealso:
  - linkId: BackedFramework.Resources.HTTP.ResponseBase
    commentId: T:BackedFramework.Resources.HTTP.ResponseBase
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BackedFramework.Controllers.BaseController.Request
  commentId: P:BackedFramework.Controllers.BaseController.Request
  id: Request
  parent: BackedFramework.Controllers.BaseController
  langs:
  - csharp
  - vb
  name: Request
  nameWithType: BaseController.Request
  fullName: BackedFramework.Controllers.BaseController.Request
  type: Property
  source:
    remote:
      path: BackedFramework/Controllers/BaseController.cs
      branch: master
      repo: https://github.com/IAmTheTable/BackedFramework.git
    id: Request
    path: ../BackedFramework/Controllers/BaseController.cs
    startLine: 36
  assemblies:
  - BackedFramework
  namespace: BackedFramework.Controllers
  summary: "\nAn instance of the request context the client sent.\n"
  example: []
  syntax:
    content: public RequestContext Request { get; }
    parameters: []
    return:
      type: BackedFramework.Resources.HTTP.RequestContext
    content.vb: Public ReadOnly Property Request As RequestContext
  overload: BackedFramework.Controllers.BaseController.Request*
  seealso:
  - linkId: BackedFramework.Resources.HTTP.RequestBase
    commentId: T:BackedFramework.Resources.HTTP.RequestBase
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BackedFramework.Controllers.BaseController.Dispose
  commentId: M:BackedFramework.Controllers.BaseController.Dispose
  id: Dispose
  parent: BackedFramework.Controllers.BaseController
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: BaseController.Dispose()
  fullName: BackedFramework.Controllers.BaseController.Dispose()
  type: Method
  source:
    remote:
      path: BackedFramework/Controllers/BaseController.cs
      branch: master
      repo: https://github.com/IAmTheTable/BackedFramework.git
    id: Dispose
    path: ../BackedFramework/Controllers/BaseController.cs
    startLine: 38
  assemblies:
  - BackedFramework
  namespace: BackedFramework.Controllers
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: BackedFramework.Controllers.BaseController.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: BackedFramework.Controllers
  commentId: N:BackedFramework.Controllers
  name: BackedFramework.Controllers
  nameWithType: BackedFramework.Controllers
  fullName: BackedFramework.Controllers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BackedFramework.Controllers.BaseController.#ctor*
  commentId: Overload:BackedFramework.Controllers.BaseController.#ctor
  name: BaseController
  nameWithType: BaseController.BaseController
  fullName: BackedFramework.Controllers.BaseController.BaseController
- uid: BackedFramework.Resources.HTTP.ResponseBase
  commentId: T:BackedFramework.Resources.HTTP.ResponseBase
  parent: BackedFramework.Resources.HTTP
  name: ResponseBase
  nameWithType: ResponseBase
  fullName: BackedFramework.Resources.HTTP.ResponseBase
- uid: BackedFramework.Controllers.BaseController.Response*
  commentId: Overload:BackedFramework.Controllers.BaseController.Response
  name: Response
  nameWithType: BaseController.Response
  fullName: BackedFramework.Controllers.BaseController.Response
- uid: BackedFramework.Resources.HTTP.ResponseContext
  commentId: T:BackedFramework.Resources.HTTP.ResponseContext
  parent: BackedFramework.Resources.HTTP
  name: ResponseContext
  nameWithType: ResponseContext
  fullName: BackedFramework.Resources.HTTP.ResponseContext
- uid: BackedFramework.Resources.HTTP
  commentId: N:BackedFramework.Resources.HTTP
  name: BackedFramework.Resources.HTTP
  nameWithType: BackedFramework.Resources.HTTP
  fullName: BackedFramework.Resources.HTTP
- uid: BackedFramework.Resources.HTTP.RequestBase
  commentId: T:BackedFramework.Resources.HTTP.RequestBase
  isExternal: true
- uid: BackedFramework.Controllers.BaseController.Request*
  commentId: Overload:BackedFramework.Controllers.BaseController.Request
  name: Request
  nameWithType: BaseController.Request
  fullName: BackedFramework.Controllers.BaseController.Request
- uid: BackedFramework.Resources.HTTP.RequestContext
  commentId: T:BackedFramework.Resources.HTTP.RequestContext
  parent: BackedFramework.Resources.HTTP
  name: RequestContext
  nameWithType: RequestContext
  fullName: BackedFramework.Resources.HTTP.RequestContext
- uid: BackedFramework.Controllers.BaseController.Dispose*
  commentId: Overload:BackedFramework.Controllers.BaseController.Dispose
  name: Dispose
  nameWithType: BaseController.Dispose
  fullName: BackedFramework.Controllers.BaseController.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
